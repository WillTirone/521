test_power(test,100)
eigen(test)$vectors[,3]
eigen(test)$vectors[,3] / test_power(test,100)
eigen(test)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
return(wk)
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
return(wk)
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
wk_1 = A %*% wk
wk_norm = norm(wk_1,type="I")
wk = wk_1 / wk_norm
return(wk)
}
test_power(test,100)
test %*% matrix(A[,1])
test %*% matrix(test[,1])
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
return(wk)
}
test_power(test,100)
test %*% matrix(test[,1])
test^10 %*% matrix(test[,1])
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
power <- function(A) {
# arbitrary starting vector
w0 = matrix(A[,1])
n = 10 #number of times to loop?
wk = A %*% w0 #intialize
for (i in seq(1,n))
wk = A %*% wk
wk_norm = norm(wk)
sk1 = max(abs(wk))
vector = wk/sk1
value = sk1
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
power(test)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
return(wk)
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
return(wk)
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{}
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
return(wk)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{}
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
return(wk)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{}
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
return(wk)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
wk
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1)
wk = wk_1 / wk_norm
}
wk
}
test_power(test,100)
.868/.572
factor = .868/.572
factor* -.3
factor = .868/.572
factor* -.19
factor = .868/.572
factor* -.12
factor = .868/.572
factor* -.127
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"I")
wk = wk_1 / wk_norm
}
wk
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
wk
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
wk
wk_norm
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
wk
wk_norm
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"I")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test * test_power(test,100)$Eigenvector
test %*% test_power(test,100)$Eigenvector
test %*% test_power(test,100)$Eigenvector
test_power(test,100)$Eigenvalue * test_power(test,100)$Eigenvector
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"I")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
test_power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
test_power(test,100)
B = matrix(c(5,1,0,1,4,0,0,0,1), nrow=3, ncol = 3, byrow = TRUE)
eigen(B)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
power <- function(A,iterations) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
power(test,100)
#power method on B
result_B = power(B)
test = matrix(c(1,2,3,2,-1,4,3,4,-5), nrow=3, ncol = 3, byrow = TRUE)
power <- function(A,iterations=20) {
# arbitrary starting vector
wk = matrix(A[,1])
for (i in seq(1,iterations))
{
wk_1 = A %*% wk
wk_norm = norm(wk_1,"2")
wk = wk_1 / wk_norm
}
vector = wk
value = wk_norm
output = list(vector, value)
names(output) = c("Eigenvector","Eigenvalue")
output
}
power(test)
#power method on B
result_B = power(B)
B_1 = B - (result_B$Eigenvalue * (result_B$Eigenvector %*% t(result_B$Eigenvector)))
# power method on B1
result_B_1 = power(B_1)
B_2 = B_1 - (result_B_1$Eigenvalue * (result_B_1$Eigenvector %*% t(result_B_1$Eigenvector)))
# power method on B2
result_B_2 = power(B_2)
eigen_approximation = list(result_B,result_B_1,result_B_2)
names(eigen_approximation) = c("first eigval / vec pair","second eigval / vec pair","third eigval / vec pair")
eigen_approximation
thetas = seq(0.0,1.0,by=0.1)
results = dbinom(57,100,thetas)
plot(thetas,results)
marginal_y = sum((1/11) * dbinom(57,100,thetas))
posterior = (results * (1/11))/marginal_y
plot(thetas,posterior)
thetas = seq(0,1,by=0.001) #U(0,1)
results = dbinom(57,100,thetas)
plot(thetas,results,type="l")
plot(thetas,dbeta(thetas,58,44),type='l')
theta0 = seq(0.1,0.9,by=0.1)
n0 = c(1,2,8,16,32)
data=c()
for (i in theta0) {
for (j in n0) {
a = i * j
b = (1-i)*j
p = pbeta(.5,a+57,b+43,lower.tail=FALSE) #posterior (theta > .5 | sum = 57)
data = append(data,p)
}
}
probability_data = matrix(data,nrow=9,ncol=5,byrow=TRUE)
contour(theta0,n0,probability_data, xlab="thetas",ylab='n0 values')
beta_mean = function(a,b){
print("mean:")
a / (a+b)
}
beta_mode = function(a,b){
print('mode:')
(a-1) / (a+b-2)
}
beta_sd = function(a,b){
print('standard deviation:')
var = (a*b) / ((a+b)^2 * (a+b+1))
sd = sqrt(var)
return(sd)
}
CI_28 = c(qbeta(.025,17,36),qbeta(.975,17,36))
CI_82 = c(qbeta(.025,23,30),qbeta(.975,23,30))
#data for the posterior w/ 2,8 prior and posterior a = 17, posterior b = 36
print("using alpha = 17 and beta = 36 with beta(2,8) prior")
beta_mean(17,36)
beta_mode(17,36)
beta_sd(17,36)
print(c("95% CI",CI_28))
#with 8,2 prior
print(" ")
print("================================================")
print("using alpha = 23, beta = 30 with beta(8,2) prior")
beta_mean(23,30)
beta_mode(23,30)
beta_sd(23,30)
print(c("95% CI",CI_82))
#plotting prior p(\theta)
thetas = seq(0,1,by=0.001) #U(0,1)
plot(thetas, dbeta(thetas, 2,8), type='l',main="p(theta)")
#plotting p(y=15|\theta)
#plot a binomial here
plot(thetas, dbinom(15,43,thetas))
#posterior which is beta(2 + success, 8 + failure) = beta()
a=2+15
b=8+28
plot(thetas, dbeta(thetas,a,b),type='l',main="posterior model")
abline(v=beta_mean(a,b), col='red') #mean
abline(v=beta_mode(a,b), col='blue') #mode
# CI
abline(v=qbeta(.975,a,b),col='green') #lower bound
abline(v=qbeta(.025,a,b),col='green') #upper bound
(df = data.frame(
x = 1:3,
y = c("a", "b", "c"),
z = c(TRUE)
))
attributes(df)
str(df)
x=7
y=4
if (x%%2==1 & y%%2 == 0)
{stop("x odd y even")
} else if (x > 3 && y <= 3) {
print('Hello World')
} else if (x > 3) {
print("!dlrow olleH")
} else if (x <= 3) {
print('something else...')
}
x=6
y=4
if (x%%2==1 & y%%2 == 0)
{stop("x odd y even")
} else if (x > 3 && y <= 3) {
print('Hello World')
} else if (x > 3) {
print("!dlrow olleH")
} else if (x <= 3) {
print('something else...')
}
y = list(1,4,7,12)
y
y = list(1,4,7,12)
str(y)
y = list(1,4,7,12)
y$1
y = list(1,4,7,12)
y
y = list(1,4,7,12)
yy[1]
y = list(1,4,7,12)
y[1]
y
y[[1]]
y[[2]]
typeof(c(1,2))
typeof(c(1L,2L))
x = c(56, 3, 17, 2, 4, 9, 6, 5, 19, 5, 2, 3, 5, 0, 13, 12, 6, 31, 10, 21, 8, 4, 1, 1, 2, 5, 16, 1, 3, 8, 1,
3, 4, 8, 5, 2, 8, 6, 18, 40, 10, 20, 1, 27, 2, 11, 14, 5, 7, 0, 3, 0, 7, 0, 8, 10, 10, 12, 8, 82,
21, 3, 34, 55, 18, 2, 9, 29, 1, 4, 7, 14, 7, 1, 2, 7, 4, 74, 5, 0, 3, 13, 2, 8, 1, 6, 13, 7, 1, 10,
5, 2, 4, 4, 14, 15, 4, 17, 1, 9)
x[-3]
a = seq(1,100,by=3)
x
a
a = seq(2,100,by=3)
a
a = seq(2,100,by=3)
x(-a)
a = seq(2,100,by=3)
x[-a]
x[a]
not_a = seq(1,100,by=3)
x[-not_a]
not_a
not_a = seq(1,100,by=2)
x[-not_a]
odd_4 = seq(0,100,by=4)
odd_4 = seq(0,100,by=4)
odd_4
odd_4 = seq(0,100,by=4)
x[odd_4]
odd_4 = seq(0,100,by=4)
x[odd_4] %% 2 != 0
odd_4 = seq(0,100,by=4)
x[x[odd_4] %% 2 != 0]
odd_4 = seq(0,100,by=4)
x[x[odd_4] %% 2 == 0]
odd_4
x[odd_4]
x[odd_4] %% 2 == 0
odd_4 = seq(0,100,by=4)
x[x[odd_4] %% 2 != 0]
odd_4 = seq(0,100,by=4)
x[x[odd_4] %% 2 == 0]
reticulate::repl_python()
